@using TenXCards.API.Models
@using MudBlazor

<MudPaper Elevation="1" Class="pa-4">
    <MudGrid>
        <MudItem xs="12">
            <div class="d-flex justify-space-between align-center">
                <div class="flex-grow-1">
                    <div class="d-flex align-center mb-2">
                        <MudText Typo="Typo.caption" Color="Color.Secondary">
                            Utworzono: @Card.CreatedAt.ToString("dd.MM.yyyy")
                        </MudText>
                        <MudText Typo="Typo.caption" 
                                Color="@(Card.GeneratedBy == "AI" ? Color.Secondary : Color.Success)"
                                Class="ml-2 px-2 py-1 rounded mud-background-gray">
                            @(Card.GeneratedBy == "AI" ? "Sztuczna inteligencja" : "Użytkownik")
                        </MudText>
                    </div>

                    <MudText>
                        @(GetFrontPreview())
                    </MudText>
                </div>

                <div class="d-flex gap-2">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                 Color="Color.Primary"
                                 Size="Size.Small"
                                 Title="Edytuj"
                                 OnClick="() => OnEdit.InvokeAsync(Card)" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                 Color="Color.Error"
                                 Size="Size.Small"
                                 Title="Usuń"
                                 OnClick="() => OnDelete.InvokeAsync(Card)" />
                </div>
            </div>
        </MudItem>
    </MudGrid>
</MudPaper>

@code {
    [Parameter]
    public required CardDto Card { get; set; }

    [Parameter]
    public EventCallback<CardDto> OnEdit { get; set; }

    [Parameter]
    public EventCallback<CardDto> OnDelete { get; set; }

    private string GetFrontPreview()
    {
        const int maxLength = 150;
        return Card.Front.Length <= maxLength
            ? Card.Front
            : $"{Card.Front[..maxLength]}...";
    }
}
