@page "/dashboard"
@using TenXCards.API.Models
@using TenXCards.Frontend.Models
@using MudBlazor
@inject HttpClient Http
@inject ILogger<Dashboard> Logger
@inject ISnackbar Snackbar
@rendermode InteractiveServer

<PageTitle>Dashboard - TenXCards</PageTitle>

<MudContainer Class="pa-4">
    <MudPaper Elevation="3" Class="pa-4">
        <MudGrid>
            <MudItem xs="12">
                <div class="d-flex justify-space-between align-center">
                    <MudText Typo="Typo.h4">Dashboard</MudText>
                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Primary" 
                              OnClick="NavigateToCreateContent"
                              StartIcon="@Icons.Material.Filled.Add">
                        Create New Content
                    </MudButton>
                </div>
            </MudItem>

            @if (isLoading)
            {
                <MudItem xs="12" Class="d-flex justify-center">
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                </MudItem>
            }
            else if (error != null)
            {
                <MudItem xs="12">
                    <MudAlert Severity="Severity.Error" Class="my-2">
                        @error
                        <MudButton Variant="Variant.Text" 
                                  Color="Color.Primary" 
                                  OnClick="LoadOriginalContentsAsync">
                            Try Again
                        </MudButton>
                    </MudAlert>
                </MudItem>
            }
            else
            {
                <MudItem xs="12">
                    <MudGrid>
                        @if (_originalContents.Any())
                        {
                            foreach (var content in _originalContents)
                            {                        
                                <MudItem xs="12">
                                    <OriginalContentItem Item="@content" />
                                </MudItem>
                            }
                        }
                        else
                        {
                            <MudItem xs="12">
                                <MudText Align="Align.Center" 
                                        Class="py-8" 
                                        Color="Color.Secondary">
                                    No content found. Create some content to get started!
                                </MudText>
                            </MudItem>
                        }
                    </MudGrid>

                    @if (_paginationInfo.TotalCount > 0)
                    {
                        <MudItem xs="12" Class="d-flex justify-center mt-4">
                            <MudPagination Count="@((int)Math.Ceiling(_paginationInfo.TotalCount / (double)_paginationInfo.PageSize))"
                                         SelectedChanged="HandlePageChange"
                                         Selected="@_paginationInfo.CurrentPage" />
                        </MudItem>
                    }
                </MudItem>
            }
        </MudGrid>
    </MudPaper>
</MudContainer>

@code {
    private List<OriginalContentDto> _originalContents = new();
    private PaginationInfo _paginationInfo = new();
    private bool isLoading = true;
    private string? error;

    private class PaginationInfo
    {
        public int CurrentPage { get; set; } = 1;
        public int PageSize { get; set; } = 2;
        public int TotalCount { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadOriginalContentsAsync();
    }

    private async Task LoadOriginalContentsAsync()
    {
        try
        {
            isLoading = true;
            error = null;

            var query = $"page={_paginationInfo.CurrentPage}&limit={_paginationInfo.PageSize}";
            var response = await Http.GetFromJsonAsync<PaginationResult<OriginalContentDto>>($"api/originalcontents?{query}");

            if (response != null)
            {
                _originalContents = response.Items.ToList();
                _paginationInfo.TotalCount = response.Total;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading original contents");
            error = "Failed to load contents. Please try again later.";
            Snackbar.Add("Failed to load contents. Please try again later.", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandlePageChange(int newPage)
    {
        _paginationInfo.CurrentPage = newPage;
        await LoadOriginalContentsAsync();
    }

    private void NavigateToCreateContent()
    {
        // TODO: Implement navigation to content creation page
        Snackbar.Add("Navigation to content creation page not implemented yet.", Severity.Info);
    }
}
