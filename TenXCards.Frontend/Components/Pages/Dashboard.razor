@page "/dashboard"
@using TenXCards.API.Models
@using TenXCards.Frontend.Models
@inject HttpClient Http
@inject ILogger<Dashboard> Logger
@rendermode InteractiveServer

<div class="container mx-auto p-4">
    <div class="flex justify-between items-center mb-6">
        <h1 class="text-2xl font-bold">Dashboard</h1>
        <button class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700" @onclick="NavigateToCreateContent">
            Create New Content
        </button>
    </div>

    @if (isLoading)
    {
        <div class="flex justify-center">
            <div class="animate-spin rounded-full h-8 w-8 border-t-2 border-blue-500"></div>
        </div>
    }
    else if (error != null)
    {
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" role="alert">
            <p>@error</p>
            <button class="underline" @onclick="LoadOriginalContentsAsync">Try Again</button>
        </div>
    }
    else
    {
        <div class="space-y-4">
            <div class="flex justify-between items-center mb-4">
                <div class="flex items-center space-x-2">
                    <label for="sort" class="text-sm font-medium">Sort by:</label>
                    @* <select id="sort" class="border rounded px-2 py-1" value="@currentSort" @onchange="HandleSortChange"> *@
                    @*     <option value="createdAt_desc">Newest first</option> *@
                    @*     <option value="createdAt_asc">Oldest first</option> *@
                    @* </select> *@
                </div>
            </div>

            <div class="space-y-4">
                @if (_originalContents.Any())
                {
                    foreach (var content in _originalContents)
                    {                        
                        <OriginalContentItem Item="@content" />
                    }
                }
                else
                {
                    <div class="text-gray-500 text-center py-8">
                        No content found. Create some content to get started!
                    </div>
                }
            </div>

            @if (_paginationInfo.TotalCount > 0)
            {
                <div class="flex justify-center mt-4 space-x-2">
                    @{
                        var totalPages = (int)Math.Ceiling(_paginationInfo.TotalCount / (double)_paginationInfo.PageSize);
                        for (var i = 1; i <= totalPages; i++)
                        {
                            var pageNumber = i;                            
                            <button class="@(pageNumber == _paginationInfo.CurrentPage ? "bg-blue-600 text-white" : "bg-gray-200") 
                                                           px-3 py-1 rounded" @onclick="() => HandlePageChange(pageNumber)">
                                @i
                            </button>
                        }
                    }
                </div>
            }
        </div>
    }
</div>

@code {
    private List<OriginalContentDto> _originalContents = new();
    private PaginationInfo _paginationInfo = new();
    private bool isLoading = true;
    private string? error;

    private class PaginationInfo
    {
        public int CurrentPage { get; set; } = 1;
        public int PageSize { get; set; } = 2;
        public int TotalCount { get; set; }
        //public string SortOrder { get; set; } = "createdAt_desc";
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadOriginalContentsAsync();
    }

    private async Task LoadOriginalContentsAsync()
    {
        try
        {
            isLoading = true;
            error = null;

            var query = $"page={_paginationInfo.CurrentPage}&limit={_paginationInfo.PageSize}"; // &sort={_paginationInfo.SortOrder}";
            var response = await Http.GetFromJsonAsync<PaginationResult<OriginalContentDto>>($"api/originalcontents?{query}");

            if (response != null)
            {
                _originalContents = response.Items.ToList();
                _paginationInfo.TotalCount = response.Total;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading original contents");
            error = "Failed to load contents. Please try again later.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandlePageChange(int newPage)
    {
        _paginationInfo.CurrentPage = newPage;
        await LoadOriginalContentsAsync();
    }

    // private async Task HandleSortChange(string newSortOrder)
    // {
    //     _paginationInfo.SortOrder = newSortOrder;
    //     _paginationInfo.CurrentPage = 1; Reset to first page when changing sort
    //     await LoadOriginalContentsAsync();
    // }

    private void NavigateToCreateContent()
    {
        // TODO: Implement navigation to content creation page
    }
}
