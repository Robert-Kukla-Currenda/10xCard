@page "/login"
@using TenXCards.API.Models
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using MudBlazor
@using System.Net.Http.Json
@using TenXCards.Frontend.Services
@inject ISnackbar Snackbar
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IAuthenticationService AuthService

<PageTitle>Logowanie - TenXCards</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="pa-4">
    <MudPaper Elevation="3" Class="pa-4">
        <MudText Typo="Typo.h4" Class="mb-4" Align="Align.Center">Zaloguj się</MudText>
        
        <EditForm Model="@loginCommand" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <MudTextField T="string"
                         @bind-Value="loginCommand.Email"
                         Label="Email"
                         Required="true"
                         RequiredError="Adres email jest wymagany"
                         InputType="InputType.Email"
                         Class="mb-3" />

            <MudTextField T="string"
                         @bind-Value="loginCommand.Password"
                         Label="Hasło"
                         Required="true"
                         RequiredError="Hasło jest wymagane"
                         InputType="InputType.Password"
                         Class="mb-4" />

            <MudText Typo="Typo.caption" Color="Color.Error" Class="mb-4">
                <ValidationSummary />
            </MudText>

            <MudButton ButtonType="ButtonType.Submit"
                      Variant="Variant.Filled"
                      Color="Color.Primary"
                      Size="Size.Large"
                      FullWidth="true"
                      Disabled="@isProcessing">
                @if (isProcessing)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Logowanie...</MudText>
                }
                else
                {
                    <MudText>Zaloguj się</MudText>
                }
            </MudButton>
        </EditForm>

        <MudDivider Class="my-4" />
        
        <MudText Align="Align.Center">
            Nie masz jeszcze konta? 
            <MudLink Href="/register" Underline="Underline.Always">Zarejestruj się</MudLink>
        </MudText>
    </MudPaper>
</MudContainer>

@code {
    private LoginUserCommand loginCommand = new();
    private bool isProcessing = false;

    private async Task HandleLogin()
    {
        if (isProcessing) return;
        
        try
        {
            isProcessing = true;
            var response = await Http.PostAsJsonAsync("api/users/login", loginCommand);
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResultDto>();
                if (result != null && await AuthService.LoginAsync(result))
                {
                    Snackbar.Add("Zalogowano pomyślnie!", Severity.Success);
                    NavigationManager.NavigateTo("/");
                }
                else
                {
                    Snackbar.Add("Wystąpił błąd podczas logowania. Spróbuj ponownie później.", Severity.Error);
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                Snackbar.Add("Nieprawidłowy email lub hasło.", Severity.Error);
            }
            else
            {
                Snackbar.Add("Wystąpił błąd podczas logowania. Spróbuj ponownie później.", Severity.Error);
            }
        }
        catch
        {
            Snackbar.Add("Wystąpił błąd podczas komunikacji z serwerem. Spróbuj ponownie później.", Severity.Error);
        }
        finally
        {
            isProcessing = false;
        }
    }
}