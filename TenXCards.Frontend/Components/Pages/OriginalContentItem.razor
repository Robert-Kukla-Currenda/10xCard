@using TenXCards.API.Models
@using MudBlazor

<MudPaper Elevation="2" Class="pa-4 mb-4">
    <MudGrid>
        <MudItem xs="12">
            <div class="d-flex justify-space-between align-center">
                <div>
                    <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mb-1">
                        Created @Item.CreatedAt.ToString("MMM dd, yyyy")
                    </MudText>
                    <MudText Color="Color.Default" Class="mb-2">
                        @(GetConeten())
                    </MudText>
                    <MudButton Variant="Variant.Text" 
                              Color="Color.Primary" 
                              OnClick="ToggleFullLengthContent">
                        @(isFullLengthContent ? "Show shorten content" : "Show full length content")
                    </MudButton>
                </div>
                <MudButton Variant="Variant.Text" 
                          Color="Color.Primary" 
                          OnClick="ToggleExpanded">
                    @(isExpanded ? "Hide Cards" : "Show Cards")
                </MudButton>
            </div>
        </MudItem>

        @if (isExpanded)
        {
            <MudItem xs="12" Class="mt-4">
                @if (Item.Cards != null && Item.Cards.Any())
                {
                    <FlashcardsList Cards="@Item.Cards.ToList()" />
                }
                else
                {
                    <MudText Align="Align.Center" 
                            Color="Color.Secondary" 
                            Class="py-4">
                        No cards created yet for this content.
                    </MudText>
                }
            </MudItem>
        }
    </MudGrid>
</MudPaper>

@code {
    [Parameter]
    public required OriginalContentDto Item { get; set; }

    private bool isExpanded;
    private bool isFullLengthContent = false;


    private string GetConeten()
    {
        if (isFullLengthContent)
        {
            return Item.Content;
        }

        return GetContentPreview();
    }

    private string GetContentPreview()
    {
        const int previewLength = 150;
        if (string.IsNullOrEmpty(Item.Content)) return string.Empty;

        return Item.Content.Length <= previewLength 
            ? Item.Content 
            : Item.Content[..previewLength] + "...";
    }

    private void ToggleExpanded()
    {
        isExpanded = !isExpanded;
    }

    private void ToggleFullLengthContent()
    {
        isFullLengthContent = !isFullLengthContent;
    }
}
