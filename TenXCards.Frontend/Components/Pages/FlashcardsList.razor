@using TenXCards.API.Models
@inject HttpClient Http
@inject ILogger<FlashcardsList> Logger

<div class="space-y-4">
    @foreach (var card in Cards)
    {        
        <FlashcardItem Card="@card" />
        @*             OnEdit="HandleEdit"  *@
        @*             OnDelete="HandleDelete" /> *@
    }
</div>

@if (showConfirmDelete)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
        <div class="bg-white p-6 rounded-lg shadow-xl max-w-md w-full">
            <h3 class="text-lg font-semibold mb-4">Confirm Delete</h3>
            <p class="mb-4">Are you sure you want to delete this card?</p>
            <div class="flex justify-end space-x-3">
                <button class="px-4 py-2 bg-gray-200 rounded hover:bg-gray-300"
                        @onclick="CancelDelete">
                    Cancel
                </button>
                <button class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700"
                        @onclick="ConfirmDelete">
                    Delete
                </button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public required List<CardDto> Cards { get; set; }

    [Parameter]
    public EventCallback<CardDto> OnCardDeleted { get; set; }

    private bool showConfirmDelete;
    private CardDto? cardToDelete;    private CardDto? cardToEdit;
    private bool showEditModal;

    private void HandleEdit(CardDto card)
    {
        cardToEdit = card;
        showEditModal = true;
    }

    private void HandleCardUpdated(CardDto updatedCard)
    {
        var index = Cards.FindIndex(c => c.Id == updatedCard.Id);
        if (index != -1)
        {
            Cards[index] = updatedCard;
            StateHasChanged();
        }
    }

    private void HandleDelete(CardDto card)
    {
        cardToDelete = card;
        showConfirmDelete = true;
    }

    private void CancelDelete()
    {
        showConfirmDelete = false;
        cardToDelete = null;
    }

    private async Task ConfirmDelete()
    {
        if (cardToDelete == null) return;

        try
        {
            var response = await Http.DeleteAsync($"api/cards/{cardToDelete.Id}");
            
            if (response.IsSuccessStatusCode)
            {
                await OnCardDeleted.InvokeAsync(cardToDelete);
                Cards.Remove(cardToDelete);
            }
            else
            {
                Logger.LogError("Failed to delete card: {StatusCode}", response.StatusCode);
                // TODO: Show error toast
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting card");
            // TODO: Show error toast
        }
        finally
        {
            showConfirmDelete = false;
            cardToDelete = null;
        }
    }
}
