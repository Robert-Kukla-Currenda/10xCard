@using TenXCards.Frontend.Models
@using TenXCards.Frontend.Pages.Dialogs
@using TenXCards.Frontend.Pages.Components
@using TenXCards.Frontend.Services
@inject IHttpService Http
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudPaper Elevation="2" Class="pa-4 mb-4">
    <MudGrid>
        <MudItem xs="12">
            <div class="d-flex flex-column">
                <div class="d-flex justify-space-between align-center">
                    <div class="flex-grow-1">
                        <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mb-1">
                            Utworzono: @Item.CreatedAt.ToString("dd.MM.yyyy")
                        </MudText>
                        |
                        <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mb-1">
                            Ilość fiszek: @(Item.Cards?.Count ?? 0)
                        </MudText>
                    </div>

                    <MudIconButton Icon="@(isFullLengthContent ? Icons.Material.Filled.UnfoldLess : Icons.Material.Filled.UnfoldMore)"
                    Color="Color.Primary"
                    OnClick="ToggleFullLengthContent"
                    Size="Size.Small" 
                    title="@(isFullLengthContent ? "Zwiń zawartość" : "Rozwiń zawartość")" />
                    <MudIconButton Icon="@Icons.Material.Filled.Add"
                    Color="Color.Success"
                    Size="Size.Small" 
                    title="Dodaj fiszkę"
                    OnClick="OpenCreateCardDialog" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                    Color="Color.Error"
                    OnClick="OpenDeleteDialog"
                    Size="Size.Small" 
                    title="Usuń zawartość" />
                </div>
                <div class="d-flex align-center gap-2">
                    <MudText Color="Color.Default">
                        @(GetConeten())
                    </MudText>
                </div>
                <div>
                    <MudButton Variant="Variant.Text"
                    Color="Color.Primary"
                    OnClick="ToggleExpanded">
                        @(isExpanded ? "Ukryj fiszki" : "Pokaż fiszki")
                    </MudButton>
                </div>
            </div>
        </MudItem>

        @if (isExpanded)
        {
            <MudItem xs="12" Class="mt-4">
                @if (Item.Cards != null && Item.Cards.Any())
                {
                    <FlashcardsList OriginalContentId="@Item.Id"
                    Cards="@Item.Cards.ToList()"
                    OnDeleted="OnDeleteCard"
                    OnEdit="OnCreateOrEditCard" />
                }
                else
                {
                    <MudText Align="Align.Center" 
                    Color="Color.Secondary" 
                    Class="py-4">
                        Nie utworzono jeszcze żadnych fiszek dla tej treści.
                    </MudText>
                }
            </MudItem>
        }
    </MudGrid>
</MudPaper>

@code {
    [Parameter]
    public required OriginalContentDto Item { get; set; }

    [Parameter]
    public EventCallback OnDeleted { get; set; }

    [Parameter]
    public EventCallback OnCreateOrEdit { get; set; }

    private bool isExpanded;
    private bool isFullLengthContent = false;
    private bool isDeleting;

    private string GetConeten()
    {
        if (isFullLengthContent)
        {
            return Item.Content;
        }

        return GetContentPreview();
    }

    private string GetContentPreview()
    {
        const int previewLength = 150;
        if (string.IsNullOrEmpty(Item.Content)) return string.Empty;

        return Item.Content.Length <= previewLength 
            ? Item.Content 
            : Item.Content[..previewLength] + "...";
    }

    private void ToggleExpanded()
    {
        isExpanded = !isExpanded;
    }

    private void ToggleFullLengthContent()
    {
        isFullLengthContent = !isFullLengthContent;
    }

    private async Task OpenDeleteDialog()
    {        
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters
        {            
            { "Message", "Czy na pewno chcesz usunąć tę treść wraz ze wszystkimi powiązanymi fiszkami?"}
        };
        var dialog = await DialogService.ShowAsync<DeleteDialog>("Usuwanie treści", parameters);
        var result = await dialog.Result;
        if (result != null && !result.Canceled)
        {
            await DeleteContent();
        }                
    }    

    private async Task DeleteContent()
    {
        if (isDeleting) return;

        try
        {
            isDeleting = true;
            var response = await Http.DeleteAsync($"/api/originalcontents/{Item.Id}");

            if (response.IsSuccessStatusCode)
            {
                await OnDeleteCard();
                Snackbar.Add("Treść została usunięta", Severity.Success);
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                throw new Exception(error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Wystąpił błąd podczas usuwania treści: {ex.Message}", Severity.Error);
        }
        finally
        {
            isDeleting = false;
        }
    }

    private async Task OnDeleteCard()
    {
        if (OnDeleted.HasDelegate)
        {
            await OnDeleted.InvokeAsync();
        }
    }

    private async Task OpenCreateCardDialog()
    {
        var parameters = new DialogParameters
        {
            { nameof(CreateEditFlashcardModal.OriginalContentId), Item.Id }
        };
        var dialog = await DialogService.ShowAsync<CreateEditFlashcardModal>("Dodaj nową fiszkę", parameters);
        var result = await dialog.Result;
        if (result != null && !result.Canceled)
        {
            await OnCreateOrEditCard();
        }
    }

    private async Task OnCreateOrEditCard()
    {
        if (OnCreateOrEdit.HasDelegate)
        {
            await OnCreateOrEdit.InvokeAsync();
        }        
    }
}
