@using TenXCards.Frontend.Models
@using TenXCards.Frontend.Pages.Dialogs
@using TenXCards.Frontend.Services
@inject IDialogService DialogService
@inject IHttpService HttpService
@inject ISnackbar Snackbar

<MudPaper Elevation="1" Class="pa-4">
    <MudGrid>
        <MudItem xs="12">
            <div class="d-flex justify-space-between align-center">
                <div class="flex-grow-1">
                    <div class="d-flex align-center mb-2">
                        <div class="flex-grow-1">
                            <MudText Typo="Typo.caption" Color="Color.Secondary">
                                Utworzono: @Card.CreatedAt.ToString("dd.MM.yyyy")
                            </MudText>
                            <MudText Typo="Typo.caption" 
                            Color="@(Card.GeneratedBy == "AI" ? Color.Secondary : Color.Success)"
                            Class="ml-2 px-2 py-1">
                                @if (Card.GeneratedBy == "AI")
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.AutoAwesome" Title="Fiszka wygenerowana AI" />
                                }
                                else
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Person" Title="Fiszka użytkownika" />
                                }                                
                            </MudText>
                        </div>
                        <MudIconButton Icon="@Icons.Material.Filled.Edit"
                        Color="Color.Primary"
                        Size="Size.Small"
                        title="Edytuj"
                        OnClick="OpenEditCardDialog" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete"
                        Color="Color.Error"
                        Size="Size.Small"
                        title="Usuń"
                        OnClick="OpenDeleteDialog" />
                    </div>

                    <div class="d-flex flex-column gap-4">
                        <div>
                            <div class="d-flex align-center mb-2">
                                <MudIcon Icon="@Icons.Material.Filled.FlipToFront" Class="mr-3"/>
                                <MudText Typo="Typo.subtitle2" Color="Color.Primary">Przód fiszki:</MudText>
                            </div>
                            <MudPaper Elevation="0" Class="pa-4 mud-background-gray">
                                <MudText>@Card.Front</MudText>
                            </MudPaper>
                        </div>
                        <div>
                            <div class="d-flex align-center mb-2">
                                <MudIcon Icon="@Icons.Material.Filled.FlipToBack" Class="mr-3"/>
                                <MudText Typo="Typo.subtitle2" Color="Color.Secondary">Tył fiszki:</MudText>
                            </div>
                            <MudPaper Elevation="0" Class="pa-4 mud-background-gray">
                                <MudText>@Card.Back</MudText>
                            </MudPaper>
                        </div>
                    </div>
                </div>
            </div>
        </MudItem>
    </MudGrid>
</MudPaper>

@code {
    [Parameter]
    public required int OriginalContentId { get; set; }

    [Parameter]
    public required CardDto Card { get; set; }

    [Parameter]
    public EventCallback OnEdit { get; set; }

    [Parameter]
    public EventCallback OnDelete { get; set; }

    private bool isDeleting;

    private async Task OpenDeleteDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters
        {
            { "Message", "Czy na pewno chcesz usunąć tę fiszkę?"}
        };
        var dialog = await DialogService.ShowAsync<DeleteDialog>("Usuwanie fiszki", parameters);
        var result = await dialog.Result;
        if (result != null && !result.Canceled)
        {
            await DeleteFlashcard();
        }
    }

    private async Task DeleteFlashcard()
    {
        if (isDeleting) return;

        try
        {
            isDeleting = true;
            var response = await HttpService.DeleteAsync($"/api/cards/{Card.Id}");

            if (response.IsSuccessStatusCode)
            {
                if (OnDelete.HasDelegate)
                {
                    await OnDelete.InvokeAsync();
                }
                Snackbar.Add("Fiszka została usunięta", Severity.Success);
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                throw new Exception(error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Wystąpił błąd podczas usuwania fiszki: {ex.Message}", Severity.Error);
        }
        finally
        {
            isDeleting = false;
        }
    }

    private async Task OpenEditCardDialog()
    {
        var parameters = new DialogParameters
        {
            { nameof(CreateEditFlashcardModal.OriginalContentId), OriginalContentId },
            { nameof(CreateEditFlashcardModal.Card), Card }
        };
        var dialog = await DialogService.ShowAsync<CreateEditFlashcardModal>("Edytuj fiszkę", parameters);
        var result = await dialog.Result;
        if (result != null && !result.Canceled)
        {
            if (OnEdit.HasDelegate)
            {
                await OnEdit.InvokeAsync();
            }
        }
    }
}
