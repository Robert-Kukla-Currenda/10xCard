@page "/cards/generate"
@attribute [Authorize]
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using TenXCards.Frontend.Models
@using TenXCards.Frontend.Services
@inject IHttpService HttpService
@inject ISnackbar Snackbar

<PageTitle>Generowanie fiszki - TenXCards</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="pa-4">
    <MudPaper Elevation="3" Class="pa-4">
        <MudText Typo="Typo.h1" Class="mb-4" Align="Align.Center">Generuj fiszki</MudText>

        <EditForm Model="_model" OnValidSubmit="HandleValidSubmit" FormName="generate">
            <DataAnnotationsValidator />

            <MudCard Class="mb-4">
                <MudCardContent>
                    <MudTextField T="string"
                                  @bind-Value="_model.Content"
                                  Label="Treść do przetworzenia"
                                  Lines="10"
                                  MaxLength="10000"
                                  Immediate="true"
                                  Variant="Variant.Outlined"
                                  HelperText="Wprowadź tekst do wygenerowania fiszki (minimum 1000 znaków)"
                                  Class="mb-3" />
                    <ValidationMessage For="@(() => _model.Content)" />
                </MudCardContent>
            </MudCard>

            @if (_model.Cards != null && _model.Cards.Any())
            {
                <MudCard Class="mb-4">
                    <MudCardContent>
                        <div class="d-flex flex-column gap-4"><h5>Fiszki</h5></div>
                    </MudCardContent>
                </MudCard>

                for (int i = 0; i < _model.Cards.Count; i++)
                {
                    var index = i;
                    <MudCard Class="mb-4">
                        <MudCardContent>
                            <MudText Typo="Typo.caption"
                                     Color="@(_model.Cards[index].GeneratedBy == "AI" ? Color.Secondary : Color.Success)"
                                     Class="ml-2 px-2 py-1">
                                @if (_model.Cards[index].GeneratedBy == "AI")
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.AutoAwesome" Title="Fiszka wygenerowana AI" />
                                }
                                else
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Person" Title="Fiszka użytkownika" />
                                }
                            </MudText>

                            <div class="d-flex flex-column gap-4">
                                <MudTextField T="string"
                                              @bind-Value="_model.Cards[index].Front"
                                              Label="@($"Przód fiszki {index + 1}")"
                                              Lines="3"
                                              MaxLength="1000"
                                              Required="true"
                                              RequiredError="Przód fiszki jest wymagany"
                                              Immediate="true"
                                              Variant="Variant.Outlined" />

                                <MudTextField T="string"
                                              @bind-Value="_model.Cards[index].Back"
                                              Label="@($"Tył fiszki {index + 1}")"
                                              Lines="5"
                                              MaxLength="5000"
                                              Required="true"
                                              RequiredError="Tył fiszki jest wymagany"
                                              Immediate="true"
                                              Variant="Variant.Outlined" />
                            </div>
                        </MudCardContent>
                    </MudCard>
                }
                <MudCard>
                    <MudCardContent>
                        <MudButton ButtonType="ButtonType.Button" OnClick="GenerateOrClearFlascards"
                                   Variant="Variant.Filled"
                                   Color="Color.Warning"
                                   Size="Size.Large"
                                   FullWidth="true"
                                   Style="text-transform:initial"
                                   Disabled="@_isSubmitting">
                            @(_model.Cards == null || !_model.Cards.Any() || !IsAnyFlascardGeneratedByAI() ? "Wygeneruj fiszki przez AI" : "Wyczyść propozycje fiszek AI")
                        </MudButton>
                    </MudCardContent>
                </MudCard>
            }

            <div class="d-flex gap-3 mt-3">
                <MudButton ButtonType="ButtonType.Submit"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           Size="Size.Large"
                           Class="flex-grow-1"
                           Disabled="@_isSubmitting">
                    @if (_isSubmitting)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Generowanie...</MudText>
                    }
                    else
                    {
                        if (_model.Cards != null && _model.Cards.Any())
                        {
                            <MudText>Zapisz fiszki</MudText>
                        }
                        else
                        {
                            <MudText><MudIcon Icon="@Icons.Material.Filled.AutoAwesome" Title="AI" /> Generuj fiszki przez AI</MudText>
                        }
                    }
                </MudButton>

                <MudButton ButtonType="ButtonType.Button"
                           Variant="Variant.Filled"
                           Color="Color.Secondary"
                           Size="Size.Large"
                           Class="flex-grow-1"
                           Disabled="@_isSubmitting"
                           OnClick="AddFlashcard">
                    <MudText><MudIcon Icon="@Icons.Material.Filled.Person" Title="Fiszka wygenerowana AI" /> Dodaj własną fiszkę</MudText>
                </MudButton>
            </div>
        </EditForm>
    </MudPaper>
</MudContainer>


@code {
    private class GenerateFormModel
    {
        [Required(ErrorMessage = "Treść jest wymagana")]
        [StringLength(10000, MinimumLength = 1000,
            ErrorMessage = "Treść musi mieć od {2} do {1} znaków")]
        public string? Content { get; set; }

        public List<CardDto>? Cards { get; set; }
    }

    private bool _isSubmitting;
    private GenerateFormModel _model = new();

    private async Task HandleValidSubmit()
    {
        if (_isSubmitting) return;

        _isSubmitting = true;
        try
        {
            if (_model.Cards == null || !_model.Cards.Any())
            {
                await GenerateFlashcards();
            }
            else
            {
                await SaveContentAndCards();
            }

        }
        catch (Exception ex)
        {
            Snackbar.Add($"Wystąpił błąd: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isSubmitting = false;
        }
    }

    private async Task GenerateOrClearFlascards()
    {
        if (_isSubmitting) return;

        try
        {
            _isSubmitting = true;
            if (_model.Cards == null || !_model.Cards.Any() || !IsAnyFlascardGeneratedByAI())
            {
                await GenerateFlashcards();
            }
            else
            {
                ClearAICards();
            }
        }
        finally
        {
            _isSubmitting = false;
        }

    }

    private void ClearAICards()
    {
        if (_model.Cards == null) return;

        _model.Cards = _model.Cards.Where(card => card.GeneratedBy != "AI").ToList();

        if (!_model.Cards.Any())
        {
            _model.Cards = null;
        }

        StateHasChanged();
    }

    private async Task GenerateFlashcards()
    {
        var command = new GenerateCardCommand { OriginalContent = _model.Content! };
        var json = System.Text.Json.JsonSerializer.Serialize(command);
        var response = await HttpService.PostAsJsonAsync("/api/cards/generate", command);

        if (response.IsSuccessStatusCode)
        {
            var aiCards = await response.Content.ReadFromJsonAsync<List<CardDto>>();
            if (aiCards == null || !aiCards.Any())
            {
                Snackbar.Add("Nie udało się wygenerować fiszek", Severity.Warning);
                return;
            }

            if (_model.Cards == null)
            {
                _model.Cards = new List<CardDto>();
            }
            _model.Cards.AddRange(aiCards);

            Snackbar.Add("Fiszka została wygenerowana pomyślnie", Severity.Success);
            StateHasChanged();
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            Snackbar.Add($"Błąd generowania fiszki: {error}", Severity.Error);
        }
    }

    private void AddFlashcard()
    {
        if (_model.Cards == null)
        {
            _model.Cards = new List<CardDto>();
        }
        var newCard = new CardDto
            {
                GeneratedBy = "human",
                Front = string.Empty,
                Back = string.Empty
            };
        _model.Cards.Add(newCard);
        StateHasChanged();
    }

    private async Task SaveContentAndCards()
    {
        if (_model == null ||
            string.IsNullOrEmpty(_model.Content) ||
            _model.Cards == null || !_model.Cards.Any()) return;

        try
        {
            //original content save
            var originalContent = new CreateOriginalContentCommand
                {
                    Content = _model.Content!
                };

            var originalContentResponse = await HttpService.PostAsJsonAsync("/api/originalcontents", originalContent);
            if (!originalContentResponse.IsSuccessStatusCode)
            {
                var error = await originalContentResponse.Content.ReadAsStringAsync();
                Snackbar.Add($"Błąd zapisywania treści oryginalnej: {error}", Severity.Error);
                return;
            }

            var savedContent = await originalContentResponse.Content.ReadFromJsonAsync<OriginalContentDto>();
            if (savedContent == null || savedContent.Id == 0)
            {
                Snackbar.Add("Nie udało się zapisać treści oryginalnej", Severity.Error);
                return;
            }

            Snackbar.Add("Treść oryginalna została zapisana pomyślnie", Severity.Success);

            //fishcard save
            var successCount = 0;
            var failureCount = 0;

            foreach (var card in _model.Cards)
            {
                var command = new SaveCardCommand
                    {
                        OriginalContentId = savedContent.Id,
                        Front = card.Front,
                        Back = card.Back,
                        GeneratedBy = card.GeneratedBy
                    };

                var response = await HttpService.PostAsJsonAsync("/api/cards", command);
                if (response.IsSuccessStatusCode)
                {
                    successCount++;
                }
                else
                {
                    failureCount++;
                    var error = await response.Content.ReadAsStringAsync();
                    Snackbar.Add($"Błąd zapisywania fiszki {successCount + 1}: {error}", Severity.Warning);
                }
            }

            if (successCount > 0)
            {
                var message = $"Zapisano pomyślnie {successCount} ";
                message += successCount == 1 ? "fiszkę" : (successCount < 5 ? "fiszki" : "fiszek");
                Snackbar.Add(message, Severity.Success);
            }

            if (failureCount > 0)
            {
                var message = $"Nie udało się zapisać {failureCount} ";
                message += failureCount == 1 ? "fiszki" : (failureCount < 5 ? "fiszki" : "fiszek");
                Snackbar.Add(message, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Wystąpił nieoczekiwany błąd: {ex.Message}", Severity.Error);
        }
    }

    private bool IsAnyFlascardGeneratedByAI()
    {
        if (_model.Cards == null) return false;

        return _model.Cards.Where(card => card.GeneratedBy == "AI").Count() > 0;
    }
}
