// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TenXCards.API.Data;

#nullable disable

namespace TenXCards.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250519084226_OrginalContent")]
    partial class OrginalContent
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TenXCards.API.Data.Models.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Back")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Front")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("GeneratedBy")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("OriginalContentId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GeneratedBy");

                    b.HasIndex("OriginalContentId");

                    b.HasIndex("UserId");

                    b.ToTable("Cards", t =>
                        {
                            t.HasCheckConstraint("CK_Card_GeneratedBy", "\"GeneratedBy\" IN ('AI', 'human')");
                        });
                });

            modelBuilder.Entity("TenXCards.API.Data.Models.ErrorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CardId")
                        .HasColumnType("integer");

                    b.Property<string>("ErrorDetails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LoggedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.ToTable("ErrorLogs");
                });

            modelBuilder.Entity("TenXCards.API.Data.Models.OriginalContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("OriginalContents", t =>
                        {
                            t.HasCheckConstraint("CK_OriginalContent_ContentLength", "char_length(\"Content\") BETWEEN 1000 AND 10000");
                        });
                });

            modelBuilder.Entity("TenXCards.API.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("FirstName", "LastName");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TenXCards.API.Data.Models.Card", b =>
                {
                    b.HasOne("TenXCards.API.Data.Models.OriginalContent", "OriginalContent")
                        .WithMany("Cards")
                        .HasForeignKey("OriginalContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TenXCards.API.Data.Models.User", "User")
                        .WithMany("Cards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OriginalContent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TenXCards.API.Data.Models.ErrorLog", b =>
                {
                    b.HasOne("TenXCards.API.Data.Models.Card", "Card")
                        .WithMany("ErrorLogs")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("TenXCards.API.Data.Models.OriginalContent", b =>
                {
                    b.HasOne("TenXCards.API.Data.Models.User", "User")
                        .WithMany("OriginalContents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TenXCards.API.Data.Models.Card", b =>
                {
                    b.Navigation("ErrorLogs");
                });

            modelBuilder.Entity("TenXCards.API.Data.Models.OriginalContent", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("TenXCards.API.Data.Models.User", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("OriginalContents");
                });
#pragma warning restore 612, 618
        }
    }
}
